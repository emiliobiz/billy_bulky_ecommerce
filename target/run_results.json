{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v5.json", "dbt_version": "1.7.1", "generated_at": "2023-11-20T16:49:45.922769Z", "invocation_id": "3f642a59-b2ed-4903-a34f-31aaf10ea838", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-20T16:49:42.463565Z", "completed_at": "2023-11-20T16:49:42.487905Z"}, {"name": "execute", "started_at": "2023-11-20T16:49:42.510103Z", "completed_at": "2023-11-20T16:49:45.371831Z"}], "thread_id": "Thread-7", "execution_time": 3.3018057346343994, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b07591-0001-8184-0004-d8be000102ae"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.billy_bulky.int_customers_segmentation", "compiled": true, "compiled_code": "WITH  __dbt__cte__staging_shopify__customers as (\nWITH customers AS (\n    SELECT * FROM SHOPIFY.PUBLIC.customers\n)\n\nSELECT\n    CUSTOMER_ID\n    , FIRST_NAME\n    , LAST_NAME\n    , EMAIL\n    , JOIN_DATE\n    , COUNTRY\nFROM customers\n),  __dbt__cte__staging_shopify__orders as (\nWITH orders AS (\n    SELECT * FROM SHOPIFY.PUBLIC.orders\n)\n\nSELECT\n    ORDER_ID\n    , CUSTOMER_ID\n    , PRODUCT_ID\n    , QUANTITY\n    , ORDER_DATE\n    , STATUS\nFROM orders\n),  __dbt__cte__staging_shopify__products as (\nWITH products AS (\n    SELECT * FROM SHOPIFY.PUBLIC.products\n)\n\nSELECT\n    PRODUCT_ID\n    , NAME\n    , CATEGORY\n    , PRICE\n    , STOCK_LEVEL\nFROM products\n), customers AS (\n    SELECT * FROM __dbt__cte__staging_shopify__customers\n)\n\n, orders AS (\n    SELECT * FROM __dbt__cte__staging_shopify__orders\n)\n\n, products AS (\n    SELECT * FROM __dbt__cte__staging_shopify__products\n)\n\n, order_aggregates AS (\n    SELECT\n        o.CUSTOMER_ID\n        , COUNT(DISTINCT o.ORDER_ID) AS frequency\n        , SUM(o.QUANTITY * p.PRICE) AS monetary\n        , AVG(o.QUANTITY * p.PRICE) AS average_order_value\n        , MAX(o.ORDER_DATE) AS last_purchase_date\n        , COUNT(CASE WHEN o.STATUS = 'cancelled' THEN 1 END) AS cancelled_orders\n        , COUNT(*) AS total_orders\n    FROM orders o\n    JOIN products p ON o.PRODUCT_ID = p.PRODUCT_ID\n    GROUP BY o.CUSTOMER_ID\n)\n\n, customer_tenure AS (\n    SELECT\n        CUSTOMER_ID\n        , JOIN_DATE\n        , CURRENT_DATE - JOIN_DATE AS tenure\n    FROM customers\n)\n\n, customer_recency AS (\n    SELECT\n        CUSTOMER_ID\n        , CURRENT_DATE - last_purchase_date AS recency\n    FROM order_aggregates\n)\n\n, final AS (\n    SELECT\n        c.CUSTOMER_ID\n        , c.FIRST_NAME\n        , c.LAST_NAME\n        , c.EMAIL\n        , c.JOIN_DATE\n        , c.COUNTRY\n        , o.frequency\n        , o.monetary\n        , o.average_order_value\n        , o.cancelled_orders\n        , o.total_orders\n        , CASE \n            WHEN o.total_orders > 0 THEN ROUND((o.cancelled_orders::FLOAT / o.total_orders) * 100, 2) \n            ELSE 0 \n          END AS cancellation_rate\n        , r.recency\n        , t.tenure\n    FROM customer_tenure t\n    JOIN customers c ON t.CUSTOMER_ID = c.CUSTOMER_ID\n    JOIN order_aggregates o ON c.CUSTOMER_ID = o.CUSTOMER_ID\n    JOIN customer_recency r ON c.CUSTOMER_ID = r.CUSTOMER_ID\n)\n\nSELECT * FROM final", "relation_name": "E_COMMERCE.intermediate.int_customers_segmentation"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-20T16:49:42.430832Z", "completed_at": "2023-11-20T16:49:42.486903Z"}, {"name": "execute", "started_at": "2023-11-20T16:49:42.488524Z", "completed_at": "2023-11-20T16:49:45.370674Z"}], "thread_id": "Thread-1", "execution_time": 3.306363105773926, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b07591-0001-8184-0004-d8be000102aa"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.billy_bulky.int_products_performance", "compiled": true, "compiled_code": "WITH  __dbt__cte__staging_shopify__orders as (\nWITH orders AS (\n    SELECT * FROM SHOPIFY.PUBLIC.orders\n)\n\nSELECT\n    ORDER_ID\n    , CUSTOMER_ID\n    , PRODUCT_ID\n    , QUANTITY\n    , ORDER_DATE\n    , STATUS\nFROM orders\n),  __dbt__cte__staging_shopify__products as (\nWITH products AS (\n    SELECT * FROM SHOPIFY.PUBLIC.products\n)\n\nSELECT\n    PRODUCT_ID\n    , NAME\n    , CATEGORY\n    , PRICE\n    , STOCK_LEVEL\nFROM products\n), orders AS (\n    SELECT * FROM __dbt__cte__staging_shopify__orders\n)\n\n, products AS (\n    SELECT * FROM __dbt__cte__staging_shopify__products\n)\n\n, product_sales AS (\n    SELECT\n        o.PRODUCT_ID\n        , COUNT(DISTINCT o.ORDER_ID) AS total_sales\n        , SUM(o.QUANTITY) AS total_units_sold\n        , SUM(o.QUANTITY * p.PRICE) AS total_sales_value\n    FROM orders o\n    INNER JOIN products p ON o.PRODUCT_ID = p.PRODUCT_ID\n    WHERE o.STATUS NOT IN ('cancelled') \n    GROUP BY o.PRODUCT_ID\n)\n\n, product_averages AS (\n    SELECT\n        PRODUCT_ID\n        , (total_sales_value / NULLIF(total_units_sold, 0)) AS average_sale_price\n    FROM product_sales\n)\n\n, product_stock_turnover AS (\n    SELECT\n        p.PRODUCT_ID\n        , p.STOCK_LEVEL\n        , (total_units_sold / NULLIF(p.STOCK_LEVEL, 0)) AS turnover_rate\n    FROM product_sales ps\n    INNER JOIN products p ON ps.PRODUCT_ID = p.PRODUCT_ID\n)\n\n, final AS (\n    SELECT\n    p.PRODUCT_ID\n    , p.NAME\n    , p.CATEGORY\n    , p.PRICE\n    , pa.average_sale_price\n    , ps.total_sales\n    , ps.total_units_sold\n    , ps.total_sales_value\n    , pst.turnover_rate\n    , p.STOCK_LEVEL\nFROM products p\nLEFT JOIN product_sales ps ON p.PRODUCT_ID = ps.PRODUCT_ID\nLEFT JOIN product_averages pa ON p.PRODUCT_ID = pa.PRODUCT_ID\nLEFT JOIN product_stock_turnover pst ON p.PRODUCT_ID = pst.PRODUCT_ID\n)\n\nSELECT * FROM final", "relation_name": "E_COMMERCE.intermediate.int_products_performance"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-20T16:49:42.477632Z", "completed_at": "2023-11-20T16:49:42.494503Z"}, {"name": "execute", "started_at": "2023-11-20T16:49:42.512128Z", "completed_at": "2023-11-20T16:49:45.501323Z"}], "thread_id": "Thread-8", "execution_time": 3.4288148880004883, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b07591-0001-815a-0000-0004d8bed339"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.billy_bulky.sales", "compiled": true, "compiled_code": "WITH  __dbt__cte__staging_shopify__customers as (\nWITH customers AS (\n    SELECT * FROM SHOPIFY.PUBLIC.customers\n)\n\nSELECT\n    CUSTOMER_ID\n    , FIRST_NAME\n    , LAST_NAME\n    , EMAIL\n    , JOIN_DATE\n    , COUNTRY\nFROM customers\n),  __dbt__cte__staging_shopify__orders as (\nWITH orders AS (\n    SELECT * FROM SHOPIFY.PUBLIC.orders\n)\n\nSELECT\n    ORDER_ID\n    , CUSTOMER_ID\n    , PRODUCT_ID\n    , QUANTITY\n    , ORDER_DATE\n    , STATUS\nFROM orders\n),  __dbt__cte__staging_shopify__products as (\nWITH products AS (\n    SELECT * FROM SHOPIFY.PUBLIC.products\n)\n\nSELECT\n    PRODUCT_ID\n    , NAME\n    , CATEGORY\n    , PRICE\n    , STOCK_LEVEL\nFROM products\n), customers AS (\n    SELECT * FROM __dbt__cte__staging_shopify__customers\n)\n\n, orders AS (\n    SELECT * FROM __dbt__cte__staging_shopify__orders\n)\n\n, products AS (\n    SELECT * FROM __dbt__cte__staging_shopify__products\n)\n\n\n\n, enriched_orders AS (\n    SELECT\n        o.ORDER_ID\n        , o.CUSTOMER_ID\n        , o.PRODUCT_ID\n        , o.QUANTITY\n        , o.ORDER_DATE\n        , o.STATUS\n        , p.CATEGORY\n        , p.PRICE AS unit_price\n        , (o.QUANTITY * p.PRICE) AS total_price\n        , c.COUNTRY\n    FROM orders o\n    JOIN products p ON o.PRODUCT_ID = p.PRODUCT_ID\n    JOIN customers c ON o.CUSTOMER_ID = c.CUSTOMER_ID\n    WHERE o.STATUS NOT IN ('cancelled') \n)\n\n, final AS (\nSELECT\n    e.ORDER_ID\n    , e.CUSTOMER_ID\n    , e.PRODUCT_ID\n    , e.QUANTITY\n    , e.ORDER_DATE\n    , e.STATUS\n    , e.CATEGORY\n    , e.unit_price\n    , e.total_price\n    , e.COUNTRY\nFROM enriched_orders e\n)\n\nSELECT * FROM final", "relation_name": "E_COMMERCE.marts.sales"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-11-20T16:49:42.446469Z", "completed_at": "2023-11-20T16:49:42.487301Z"}, {"name": "execute", "started_at": "2023-11-20T16:49:42.507920Z", "completed_at": "2023-11-20T16:49:45.565948Z"}], "thread_id": "Thread-5", "execution_time": 3.4894590377807617, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b07591-0001-815a-0000-0004d8bed335"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.billy_bulky.int_sales_trends", "compiled": true, "compiled_code": "WITH  __dbt__cte__staging_shopify__orders as (\nWITH orders AS (\n    SELECT * FROM SHOPIFY.PUBLIC.orders\n)\n\nSELECT\n    ORDER_ID\n    , CUSTOMER_ID\n    , PRODUCT_ID\n    , QUANTITY\n    , ORDER_DATE\n    , STATUS\nFROM orders\n),  __dbt__cte__staging_shopify__products as (\nWITH products AS (\n    SELECT * FROM SHOPIFY.PUBLIC.products\n)\n\nSELECT\n    PRODUCT_ID\n    , NAME\n    , CATEGORY\n    , PRICE\n    , STOCK_LEVEL\nFROM products\n), orders AS (\n    SELECT * FROM __dbt__cte__staging_shopify__orders\n)\n\n, products AS (\n    SELECT * FROM __dbt__cte__staging_shopify__products\n)\n\n, daily_sales AS (\n    SELECT\n        DATE(ORDER_DATE) AS sale_date\n        , COUNT(DISTINCT ORDER_ID) AS total_orders\n        , SUM(QUANTITY) AS total_units_sold\n        , SUM(QUANTITY * PRICE) AS total_sales_value\n    FROM orders AS o\n    JOIN products AS p ON o.PRODUCT_ID = p.PRODUCT_ID\n    WHERE o.STATUS NOT IN ('cancelled') \n    GROUP BY sale_date\n)\n\n, weekly_sales AS (\n    SELECT\n        DATE_TRUNC('week', sale_date) AS sale_week\n        , SUM(total_orders) AS weekly_orders\n        , SUM(total_units_sold) AS weekly_units_sold\n        , SUM(total_sales_value) AS weekly_sales_value\n    FROM daily_sales\n    GROUP BY sale_week\n)\n\n, monthly_sales AS (\n    SELECT\n        DATE_TRUNC('month', sale_date) AS sale_month\n        , SUM(total_orders) AS monthly_orders\n        , SUM(total_units_sold) AS monthly_units_sold\n        , SUM(total_sales_value) AS monthly_sales_value\n    FROM daily_sales\n    GROUP BY sale_month\n)\n\n, yearly_sales AS (\n    SELECT\n        DATE_TRUNC('year', sale_date) AS sale_year\n        , SUM(total_orders) AS yearly_orders\n        , SUM(total_units_sold) AS yearly_units_sold\n        , SUM(total_sales_value) AS yearly_sales_value\n    FROM daily_sales\n    GROUP BY sale_year\n)\n\nSELECT\n    d.sale_date\n    , d.total_orders AS daily_orders\n    , d.total_units_sold AS daily_units_sold\n    , d.total_sales_value AS daily_sales_value\n    , w.weekly_orders\n    , w.weekly_units_sold\n    , w.weekly_sales_value\n    , m.monthly_orders\n    , m.monthly_units_sold\n    , m.monthly_sales_value\n    , y.yearly_orders\n    , y.yearly_units_sold\n    , y.yearly_sales_value\nFROM daily_sales d\nLEFT JOIN weekly_sales w ON DATE_TRUNC('week', d.sale_date) = w.sale_week\nLEFT JOIN monthly_sales m ON DATE_TRUNC('month', d.sale_date) = m.sale_month\nLEFT JOIN yearly_sales y ON DATE_TRUNC('year', d.sale_date) = y.sale_year", "relation_name": "E_COMMERCE.intermediate.int_sales_trends"}], "elapsed_time": 8.66016411781311, "args": {"project_dir": "/Users/bitlevi/Documents/billy_bulky_ecommerce", "indirect_selection": "eager", "show_resource_report": false, "static_parser": true, "favor_state": false, "log_file_max_bytes": 10485760, "print": true, "log_format": "default", "log_level": "info", "version_check": true, "strict_mode": false, "introspect": true, "use_colors": true, "log_format_file": "debug", "quiet": false, "profiles_dir": "/Users/bitlevi/.dbt", "warn_error_options": {"include": [], "exclude": []}, "send_anonymous_usage_stats": true, "cache_selected_only": false, "invocation_command": "dbt run", "write_json": true, "log_path": "/Users/bitlevi/Documents/billy_bulky_ecommerce/logs", "select": [], "log_level_file": "debug", "partial_parse_file_diff": true, "partial_parse": true, "exclude": [], "enable_legacy_logger": false, "populate_cache": true, "defer": false, "printer_width": 80, "use_colors_file": true, "which": "run", "vars": {}, "macro_debugging": false}}